name: PR Quality Reporter
on:
  pull_request:
    types: [closed]
    branches:
      - dev
      - recette

jobs:
  report:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      checks: read
      pull-requests: write
      contents: read
    steps:
      - name: Get all check results and report
        uses: actions/github-script@v6
        with:
          script: |
            try {
                const pr = context.payload.pull_request;
                const baseBranch = pr.base.ref;
                const headBranch = pr.head.ref;

                console.log(`DEBUG: Base branch: '${baseBranch}', Head branch: '${headBranch}'`);

                let requiredCheckPatterns = [];
                let scenario = '';

                // Determine required checks based on PR scenario
                if (baseBranch === 'dev' && /feature/i.test(headBranch)) {
                    scenario = 'feature-to-dev';
                    requiredCheckPatterns = [
                        'Code scanning results / CodeQL',
                        'CodeQL / Analyze',
                        'Enforce PR source branch for dev'
                    ];
                } else if (baseBranch === 'recette' && headBranch === 'dev') {
                    scenario = 'dev-to-recette';
                    requiredCheckPatterns = [
                        'Build and Deploy .NET Project from PR description / build-deploy'
                    ];
                } else {
                    console.log(`DEBUG: Unmatched scenario - Base: ${baseBranch}, Head: ${headBranch}`);
                    return;
                }

                console.log(`DEBUG: Scenario: ${scenario}`);
                console.log(`DEBUG: Looking for checks matching: ${JSON.stringify(requiredCheckPatterns)}`);

                // Get all checks
                const { data: statusChecks } = await github.rest.repos.getCombinedStatusForRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: pr.head.sha
                });

                const { data: actionChecks } = await github.rest.checks.listForRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: pr.head.sha
                });

                // Combine all checks
                const allChecks = [
                    ...(statusChecks.statuses || []).map(s => ({
                        name: s.context,
                        conclusion: s.state === 'success' ? 'success' : 'failure',
                        type: 'status'
                    })),
                    ...(actionChecks.check_runs || []).map(c => ({
                        name: c.name,
                        conclusion: c.conclusion,
                        type: 'check_run'
                    }))
                ];

                console.log('DEBUG: All available checks:');
                allChecks.forEach(c => console.log(`- ${c.type} ${c.name}: ${c.conclusion}`));

                // Find matching checks (case insensitive, partial match)
                const requiredChecks = allChecks.filter(check =>
                    requiredCheckPatterns.some(pattern => 
                        check.name.toLowerCase().includes(pattern.toLowerCase())
                    )
                );

                console.log('DEBUG: Matched required checks:');
                requiredChecks.forEach(c => console.log(`- ${c.name}`));

                // Generate report
                const passed = requiredChecks.filter(c => c.conclusion === 'success');
                const failed = requiredChecks.filter(c => c.conclusion !== 'success');

                let message = `## PR Quality Report\n\n` +
                            `**From:** \`${headBranch}\` **To:** \`${baseBranch}\`\n\n` +
                            `### Required Checks (${requiredChecks.length}):\n`;

                if (requiredChecks.length > 0) {
                    message += requiredChecks.map(c => 
                        `- ${c.name} ${c.conclusion === 'success' ? '✅ Passed' : '❌ Failed'}`
                    ).join('\n');
                } else {
                    message += `_No checks matched for this PR type. Expected patterns:_\n` +
                              requiredCheckPatterns.map(p => `- ${p}`).join('\n');
                }

                message += `\n\n✅ Passed: ${passed.length}/${requiredChecks.length} checks\n` +
                          `${failed.length ? '❌ Some checks failed' : '🎉 All checks passed!'}`;

                await github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: message
                });

            } catch (error) {
                console.error('ERROR:', error);
                core.setFailed(error.message);
            }