name: Build and Deploy on PR to Master

on:
  pull_request:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        run: |
          export DOTNET_ROOT=$HOME/dotnet
          export PATH=$DOTNET_ROOT:$PATH
          mkdir -p "$DOTNET_ROOT"
          wget https://dotnetcli.azureedge.net/dotnet/Sdk/6.0.428/dotnet-sdk-6.0.428-linux-x64.tar.gz -O dotnet-sdk.tar.gz
          tar -zxf dotnet-sdk.tar.gz -C "$DOTNET_ROOT"
          dotnet --version

      - name: Read deployment config
        id: read-config
        run: |
          echo "Reading deployment config..."
          DEPLOYMENTS=$(yq '.deployments' .deploy-config.yml | yq 'keys | join(",")')
          echo "available=$DEPLOYMENTS" >> "$GITHUB_OUTPUT"

      - name: Extract chosen project from PR body
        id: pr-content
        run: |
          BODY="${{ github.event.pull_request.body }}"
          echo "PR Body: $BODY"
          CHOSEN_PROJECT=$(echo "$BODY" | grep -oP '(?<=project:\s*)\S+')
          echo "chosen=$CHOSEN_PROJECT" >> "$GITHUB_OUTPUT"

      - name: Validate project choice
        run: |
          echo "Validating project: ${{ steps.pr-content.outputs.chosen }}"
          VALID=false
          for proj in $(echo "${{ steps.read-config.outputs.available }}" | tr ',' '\n'); do
            if [[ "$proj" == "${{ steps.pr-content.outputs.chosen }}" ]]; then
              VALID=true
              break
            fi
          done

          if [[ "$VALID" == false ]]; then
            echo "❌ Invalid project: '${{ steps.pr-content.outputs.chosen }}'"
            echo "Available projects: ${{ steps.read-config.outputs.available }}"
            exit 1
          fi

      - name: Build and deploy project
        run: |
          PROJECT="${{ steps.pr-content.outputs.chosen }}"
          echo "Building and deploying project: $PROJECT"

          # Lire le chemin du projet depuis le fichier yml
          PROJECT_PATH=$(yq ".deployments.\"$PROJECT\".path" .deploy-config.yml)
          echo "Resolved path: $PROJECT_PATH"

          # Crée le dossier s’il n’existe pas (optionnel)
          mkdir -p "$PROJECT_PATH"

          # Build
          dotnet build "$PROJECT"

          # Simuler le "déploiement" en copiant vers le dossier Windows (via WSL mount)
          echo "Deploying to: $PROJECT_PATH"
          cp -r "$PROJECT"/* "$PROJECT_PATH"/