name: Build and Deploy Modified Projects

on:
  pull_request:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch master branch for comparison
        run: |
          git fetch origin master

      - name: Set up .NET 6 SDK
        run: |
          export DOTNET_ROOT=$HOME/dotnet
          export PATH=$DOTNET_ROOT:$PATH
          mkdir -p "$DOTNET_ROOT"
          wget https://download.visualstudio.microsoft.com/download/pr/e99cfe85-0e65-4c9b-b570-325764bde840/f2f02b720949c1f289443d2dcd15a7d0/dotnet-sdk-6.0.428-linux-x64.tar.gz -O dotnet-sdk.tar.gz
          tar -zxf dotnet-sdk.tar.gz -C "$DOTNET_ROOT"
          dotnet --version

      - name: Read deployment paths
        id: read-config
        run: |
          echo "Reading deployment config..."
          DEPLOYMENTS=$(yq '.deployments' .deploy-config.yml | yq 'keys | .[]')
          echo "projects=$DEPLOYMENTS" >> $GITHUB_OUTPUT

      - name: Get list of modified projects
        id: get-modified
        run: |
          echo "Detecting modified folders..."
          MODIFIED=$(git diff --name-only origin/master...HEAD | cut -d/ -f1-2 | sort -u)
          echo "MODIFIED=$MODIFIED"
          echo "changed_projects=$MODIFIED" >> $GITHUB_OUTPUT

      - name: Build and Deploy Modified Projects
        run: |
          #!/bin/bash
          set -e

          export DOTNET_ROOT=$HOME/dotnet
          export PATH=$DOTNET_ROOT:$PATH

          echo "Parsing config file..."
          declare -A deployment_paths
          while IFS=":" read -r project path; do
            project=$(echo $project | xargs)
            path=$(echo $path | xargs)
            deployment_paths["$project"]="$path"
          done < <(yq -o t '.' .deploy-config.yml | grep path)

          echo "Modified folders: ${{ steps.get-modified.outputs.changed_projects }}"

          for project_path in ${{ steps.get-modified.outputs.changed_projects }}; do
            project_name=$(basename "$project_path")
            csproj_path=$(find "$project_path" -name '*.csproj' | head -n 1)

            if [[ -n "${deployment_paths[$project_name]}" && -n "$csproj_path" ]]; then
              echo "▶️ Building $csproj_path..."
              dotnet publish "$csproj_path" -c Release -o out

              DEPLOY_PATH="${deployment_paths[$project_name]}"
              echo "🚀 Deploying $project_name to $DEPLOY_PATH"
              mkdir -p "$DEPLOY_PATH"
              cp -r "$project_path/out/"* "$DEPLOY_PATH"
            else
              echo "⚠️ Skipping $project_path (no csproj or deploy path found)"
            fi
          done
